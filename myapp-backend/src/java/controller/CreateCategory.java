/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import entity.Category;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Locale;
import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import model.HibernateUtil;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import javax.servlet.http.Part;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author shash
 */
@WebServlet(name = "CreateCategory", urlPatterns = {"/CreateCategory"})
@MultipartConfig
public class CreateCategory extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        Gson gson = new Gson();
        JsonObject responseJson = new JsonObject();
        responseJson.addProperty("success", false);

        Session session = null;
        Transaction transaction = null;

        try {
            // Get category name from the request
            String categoryname = request.getParameter("category_name");

            // Get image part from the request
            Part imgPart = request.getPart("image");

            if (imgPart == null || imgPart.getSize() == 0) {
                responseJson.addProperty("message", "Image file is required.");
                response.setContentType("application/json");
                response.getWriter().write(gson.toJson(responseJson));
                return;
            }

            // Open Hibernate session and begin transaction
            session = HibernateUtil.getSessionFactory().openSession();
            transaction = session.beginTransaction();

            // Create Category object and save initial details
            Category category = new Category();
            category.setName(categoryname);
            category.setImg_path("");  // Placeholder image path initially

            // Save category to database
            session.save(category);
            session.flush(); // Ensure ID is generated
            int categoryID = category.getId();  // Get the category ID generated by Hibernate

            // Define the directory to save the image
            File filePath = new File(getServletContext().getRealPath("").replace("build\\web", "web\\categories"));
            if (!filePath.exists()) {
                filePath.mkdirs();
            }

            // Save image
            //File imageFile = new File(filePath, movieID + ".png");
            Files.copy(imgPart.getInputStream(), new File(filePath,categoryID+".png").toPath(), StandardCopyOption.REPLACE_EXISTING);

            // Update the category object with the correct image path
            category.setImg_path("categories/" + categoryID + ".png");
            session.update(category);  // Update the image path in the database

            // Commit transaction
            transaction.commit();

            // Prepare the success response
            responseJson.addProperty("success", true);
            responseJson.addProperty("message", "Category Registration Complete");

        } catch (Exception e) {
            e.printStackTrace();
            if (transaction != null) {
                transaction.rollback();  // Rollback transaction if any error occurs
            }
            responseJson.addProperty("message", "Something went wrong. Please try again later.");
        } finally {
            if (session != null) {
                session.close();  // Close the Hibernate session
            }
        }

        // Send the response back to the client
        response.setContentType("application/json");
        response.getWriter().write(gson.toJson(responseJson));
    }
}


